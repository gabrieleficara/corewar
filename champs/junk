.name           "42"
.comment        "Just a basic Winner Program"

entree:	live	%42		# entree
	ld	%0,r5
	ld	%0,r5
	zjmp	%:bite

tir:	sti	r1,%:tirb,%1
	ld	%2304,r10
	ld	%1,r5
	ld	%0,r11

	ld	%4,r3
tirf:	live	%42
	fork	%:tirop
	live	%742
	sub	r3,r5,r3
	zjmp	%:top
	ld	%0,r11
	fork	%:tirvd
	live	%42
	sti	r10,%-510,%0
	sti	r10,%-404,%0
	sti	r10,%-303,%0
	sti	r10,%-202,%0
	ld	%0,r11
	zjmp	%:tirf

tirop:	ld	%368,r2
	ld	%0,r3
	ld	%4,r4

tirb:	live	%1
	sti	r10,%-510,r2
	sti	r10,%-510,r3
	add	r4,r5,r4
	add	r3,r4,r3
	sub	r2,r4,r2
	zjmp	%:tirop
	ld	%0,r11
	zjmp	%:tirb
	zjmp	%:infi

p32deb:	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0

	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0

p32:	sub	r6,r4,r6
	add	r6,r6,r11
	ldi	%:p32deb,r6,r7
	sti	r7,%-510,r11
p32li:	live	%1
	ld	%0,r10
	sti	r7,%-250,r6
	zjmp	%-192

tirvd:	zjmp	%:tirvd2

bite:	sti     r1,%:copie,%2
        ldi     %:copie,%3,r2   # met le ld a l'entree
        sti     r2,%:entree,%-4
        ldi     %:copie,%-1,r2
        sti     r2,%:entree,%-8

	sti	r1,%:p32li,%1
	sti	r1,%:b0,%1

	ld	%0,r2
	ld	%8,r3		# prepare les fork
	ld	%1,r4
	ld	%0,r6

b0:	live	%1		# boucle fork
	sub	r3,r4,r3
	zjmp	%:tart
	fork	%:b1
	st	r5,r2
	xor	r10,r10,r10	# pour rien
	add	r10,r10,r10	# pour rien
	add	r6,r6,r6
	ld	%0,r10
	zjmp	%:b0
b1:	add	r2,r4,r2
	add	r6,r6,r6
	add	r6,r4,r6
	ld	%0,r10
	zjmp	%:b0


top:	live	%42
	ld	%9,r3
	sti	r3,%:p32deb,%-6
	ld	%2,r3
	sti	r3,%:p32deb,%-16
	ld	%0,r3
	zjmp	%:topd


infi:	sti	r1,%:l0,%1
	sti	r1,%:l1,%1
	sti	r1,%:l2,%1
	sti	r1,%:l3,%1
	sti	r1,%:l4,%1
	sti	r1,%:l5,%1
	sti	r1,%:l6,%1
	sti	r1,%:l7,%1
	sti	r1,%:l8,%1
	sti	r1,%:l9,%1
	sti	r1,%:l10,%1

l0:	live	%1
l1:	live	%1
l2:	live	%1
l3:	live	%1
l4:	live	%1
l5:	live	%1
l6:	live	%1
l7:	live	%1
l8:	live	%1
l9:	live	%1
l10:	live	%1
	zjmp	%:l0


p1:	zjmp	%:infi

        live    %0              # pour boucher l'entree
copie:  ld      %1,r1


tart:	sti	r1,%:p64li,%1
	or	r2,r2,r2	# selection vers les modules
	zjmp	%:p64
	sub	r2,r4,r2
	zjmp	%:p32
	ld	%0,r2
	zjmp	%:infi


tirvd2:	zjmp	%:tirdow

topd:	ld	%9,r3
	sti	r3,%:fin,%-6
	ld	%2,r3
	sti	r3,%:fin,%-16
	ld	%0,r3
	zjmp	%:infi

p64deb:	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0

	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0

	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0

	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0
	zjmp	%0

p64:	ld	%10,r8
	sub	r6,r8,r6
	and	r6,%2147483648,r8
	zjmp	%:cont
	ld	%118,r8
	add	r6,r8,r6
cont:	add	r6,r6,r6
	ld	%272,r8
	ld	%29,r9
	ldi	%:p64deb,r6,r7
	sti	r7,r8,r6
	sti	r7,r9,r6
p64li:	live	%1
	ld	%0,r10
	zjmp	%186

tirdow:	ld	%425,r2
	ld	%0,r3
	ld	%4,r4

tird:	live	%42
	sti	r10,%:fin,r2
	sti	r10,%:fin,r3
	add	r4,r5,r4
	add	r3,r4,r3
	sub	r2,r4,r2
	zjmp	%:tirdow
	ld	%0,r11
	zjmp	%:tird
	zjmp	%:p1

fin:	live	%633
.name    "sebc"
.comment "sebc"
.extend

	st	r1, :l1+1
	ld	%4, r3
l1:	live	%1
	ld	%:l1 - :l2, r2
l3:	ldi	%:l2, r2, r4
	sti	r4, %:l2 - 100, r2
	add	r2, r3, r2
live:	zjmp	%:l1 - 100
	xor	r4, r4, r4
	zjmp	%:l3
l2:#deassembler par msa 1.8, made by joe
.name "Tching tching(Intercepteur), Bouh!Bouh!(bruits d'anti-jeu)"
.comment ""

	 fork  %:label00          		# 3,0,281
	 ld    %-272,r3           		# 7,3,278
	 live  %0                 		# 5,10,271
	 fork  %:label01          		# 3,15,266
	 ld    %-272,r3           		# 7,18,263
	 fork  %:label02          		# 3,25,256
	 ld    %0,r2              		# 7,28,253
	 ld    %0,r4              		# 7,35,246
	 zjmp  %:label03          		# 3,42,239

label02: ld    %4,r2              		# 7,45,236
	 ld    %0,r4              		# 7,52,229
	 zjmp  %:label03          		# 3,59,222

label01: ld    %-202,r3           		# 7,62,219
	 fork  %:label04          		# 3,69,212
	 ld    %0,r2              		# 7,72,209
	 ld    %0,r4              		# 7,79,202
	 zjmp  %:label05          		# 3,86,195

label04: ld    %4,r2              		# 7,89,192
	 ld    %0,r4              		# 7,96,185
	 zjmp  %:label05          		# 3,103,178

label00: ld    %400,r3            		# 7,106,175
	 live  %0                 		# 5,113,168
	 fork  %:label06          		# 3,118,163
	 fork  %:label07          		# 3,121,160
	 ld    %0,r2              		# 7,124,157
	 ld    %0,r4              		# 7,131,150
	 zjmp  %:label08          		# 3,138,143

label07: ld    %4,r2              		# 7,141,140
	 ld    %0,r4              		# 7,148,133
	 zjmp  %:label08          		# 3,155,126

label06: fork  %:label09          		# 3,158,123
	 ld    %0,r4              		# 7,161,120
	 zjmp  %:label10          		# 3,168,113

label09: ld    %0,r4              		# 7,171,110
	 zjmp  %:label11          		# 3,178,103

label03: ldi   r2,%:label12,r6    		# 6,181,100
	 ld    %0,r4              		# 7,187,94
	 live  %1                 		# 5,194,87

label12: sti   r6,r2,r3           		# 5,199,82
	 zjmp  %-277              		# 3,204,77

label08: ldi   r2,%:label13,r6    		# 6,207,74
	 ld    %0,r4              		# 7,213,68
	 live  %1                 		# 5,220,61

label13: sti   r6,r2,r3           		# 5,225,56
	 zjmp  %395               		# 3,230,51

label05: ldi   r2,%:label14,r6    		# 6,233,48
	 ld    %0,r4              		# 7,239,42
	 live  %1                 		# 5,246,35

label14: sti   r6,r2,r3           		# 5,251,30
	 zjmp  %-207              		# 3,256,25

label10: live  %1                 		# 5,259,22
	 fork  %:label10          		# 3,264,17
	 zjmp  %:label10          		# 3,267,14

label11: live  %1                 		# 5,270,11
	 fork  %:label11          		# 3,275,6
	 zjmp  %:label11          		# 3,278,3
.name "Death"
.comment "Fork"
.extend

	st	r1, :l1+1
	st	r1, :l2+1
	st	r1, :l3+1
	st	r1, :l4+1
	st	r1, :golive+1
	st	r1, :live+1
	xor	r2,r2,r2
	fork	%:f1
	ld	%-15, r3
	ld	%1, r4
loop:	add	r3, r4, r3
	zjmp	%:golive
	xor	r5, r5, r5
	zjmp	%:loop
golive:	live	%1
	ld	%-25, r3
	ld	%1, r4
lock:	add	r3, r4, r3
	zjmp	%:nolock
	xor	r5, r5, r5
	zjmp	%:lock
nolock:	
	xor	r1, r1, r1
	add	r1, r1, r1
	.code	00 00 00
live:	live	%1


f1:	fork	%:f2
f2:	fork	%:f3
f3:	fork	%:f4
f4:	fork	%:f5
f5:	fork	%:f6
f6:	fork	%:f7
f7:	fork	%:f8
f8:	fork	%:f9
f9:	fork	%:f10
f10:

l1:	live	%1
l2:	live	%1
l3:	live	%1
l4:	live	%1
	zjmp	%:l1

.name		"Celebration Funebre v0.99pl42"
.comment	"Jour J"

		ld   %0,r3		
label:		zjmp %:avantdebut
		zjmp %0				# pour eviter ecrasement
						# de l'instruction suivante
code:		live %42			# 5
		sti  r15,%0,r14			# 6
		zjmp %-200			# 3
		live %42			# 5
		sti  r15,%0,r14			# 6
		zjmp %-200			# 3
		live %42			# 5
		sti  r15,%0,r14			# 6
		zjmp %-200			# 3
		live %42			# 5
		sti  r15,%0,r14			# 6
		zjmp %-200			# 3
		sti  r15,%0,r14			# 6
		zjmp %-200			# 3
		sti  r15,%0,r14			# 6
		zjmp %-200
	
avantdebut:	sti   r1,%:code,%1  # 		#7	
		sti   r1,%:code,%15 # 		#7	
		sti   r1,%:code,%29 # 		#7	
		sti   r1,%:code,%43 # 		#7	
		sti   r1,%:code,%57 # 		#7	
		sti   r1,%:code,%71 # 		#7	
init:		ld   %393216,r4		 	#7	
		ld   %917504,r12		#7	
		ld   %1,r11			#7
		ld   %6,r10			#7
debut:		live %42			#5
		sti  r4,%:label , %1		#7
		add  r4,r12,r4			#5	
		sub  r10,r11,r10		#5
		zjmp %:init			#3
		fork %:debut			
		live %3
level0:		fork %:level10
level11:	live %4
		fork %:level111

level110:	live %42
		ldi  %8, %:code, r15		#set des octets 9-12
		ld   %-186, r14			#=$A-6-8
		ld   %0,r2
		zjmp  %:label
			
level10:	live %42
		fork %:level100
level101:	live %42
		ldi  %4, %:code, r15 		#set des octets 5-8
		ld   %-190, r14			#=$A-6-4
		ld   %0,r2
		zjmp %:label
		
level111:	live %42	
		ldi  %12, %:code, r15		#set des octets 13-16
		ld   %-182, r14			# $A -6 -12
		ld   %0,r2
		zjmp %:label
		
level100:	live %42
		ldi  %0, %:code, r15		#set des octets 1-4
		ld   %-194, r14			# $A -6 -0
		ld   %0,r2			#
		zjmp %:label			#
.name		"Octobre Rouge V4.2"
.comment	"And the winner is ..."

		st	r1,19
		ld	%0,r15
		fork	%:xxx
		zjmp	%:torp
xxx:		live	%42
		fork	%:torp
		zjmp	%:xxx
	
zork:		live	%42
		fork	%:zork2
		st	r1,13
		ld	%0,r15		
zork_:		live	%42
		zjmp	%-5
		
zork2:		live	%42
		fork	%:zork3
		st	r1,13
		ld	%0,r15
zork2_:		live	%42
		zjmp	%-5

zork3:		live	%42
		fork	%:zork4
		st	r1,13
		ld	%0,r15
zork3_:		live	%42
		zjmp	%-5

zork4:		live	%42
		fork	%:zork
		st	r1,13
		ld	%0,r15
zork4_:		live	%42
		zjmp	%-5		
			
back_wall:      live	%42	
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		st	r8,-400
		ld	%0,r15
		zjmp	%:back_wall

torp:		live	%42
		fork	%:torp1
		live	%42
		fork	%:torp2
		live	%42
		fork	%:torp3
		ld	%57672448,r3		#03 70 03 00
		ld	%318992390,r6		#13 03 70 06
		ld	%0,r15
		zjmp	%:launch
	
torp1:		live	%42
		fork	%:torp
		live	%42
		fork	%:zork
		ld	%251883526,r3		#0F 03 70 06
		ld	%386101254,r6		#17 03 70 06
		ld	%0,r15
		ld	%0,r15
		zjmp	%:launch

torp2:		live	%42
		fork	%:back_wall
		ld	%4294902082,r3		#FF FF 01 42
		ld	%436432902,r6		#1A 03 70 06
		ld	%0,r15
		ld	%0,r15
		ld	%0,r15
		zjmp	%:launch

torp3:		st	r1,r3	
		ld	%251883526,r6
		ld	%0,r15
		ld	%0,r15
		ld	%0,r15
		ld	%0,r15
		zjmp	%:launch

launch:	st	r3,15
	st	r6,-1
launc_:	live	%42







.name    "Survivor"
.comment "Invincible"

	live	%1
	fork	%:f1
	zjmp	%:j1
<<<<<<< .mine
f1:	ld	%5, r2
=======
f1:	ld	%4, r2
>>>>>>> .r20
	zjmp	%:run
j1:	
run:	xor	r0, r0, r0
l1:	st	r2, 1
	live	%1
	zjmp	%:l1
               
 
	.name "Torpille"
.comment "by sebc"
.extend

	xor	r4,r4,r4
debut:
	fork	%:debut2
	st	r1, :ld1+1
ld1:	live	%0
	fork	%:t2
	# process qui dit live pour T1
	st	r1, :live1+1
	ld	%-10, r2
	ld	%1, r3
live1:	live	%4
	add	r2, r3, r2
	zjmp	%:live1b
	xor	r4, r4, r4
	zjmp	%:live1
live1b:	fork	%:t2
	ld	%-10, r2
	xor	r4, r4, r4
	zjmp	%:live1

debut2:
	st	r1, :ld2+1
ld2:	live	%0
	fork	%:t1
	# process qui dit live pour T2
	st	r1, :live2+1
	ld	%-10, r2
	ld	%1, r3

live2:	live	%4
	add	r2, r3, r2
	zjmp	%:live2b
	xor	r4, r4, r4
	zjmp	%:live2

live2b:	fork	%:t1
	ld	%-10, r2
	xor	r4, r4, r4
	zjmp	%:live2

.name "Barriere"
.comment "Envoie des torpilles a l'avant et se protege avec des barrieres a l'avant et a l'arriere"

		and	r6, %0, r6
		zjmp %:init

# On bombarde derriere notre programme

arriere:	ld	%-5, r5
		ld	%1024,r4
arriere2:	ld	%-5, r3
arriere_live:	live %42
		sti	r4, %:arriere, r3
		add	r3, r5, r3
		sti	r4, %:arriere, r3
		add	r3, r5, r3
		sti	r4, %:arriere, r3
		add	r3, r5, r3
		sti	r4, %:arriere, r3
		add	r3, r5, r3
		sti	r4, %:arriere, r3
		add	r3, r5, r3
		xor	r3,%-430,r15
		zjmp	%:arriere2
		and	r6, %0, r6
		zjmp	%:arriere_live

fork_arriere:	live	%42
		fork	%:arriere
		zjmp	%:fork_arriere

# On commence les lives en serie
live_live:	live	%42	
		sti	r1, %:live100, r9	
		sti	r1, %:live102, r9	
		sti	r1, %:live104, r9	
		sti	r1, %:live106, r9	
		sti	r1, %:live108, r9	
		sti	r1, %:live110, r9	
		sti	r1, %:live112, r9	
		sti	r1, %:live114, r9	
		sti	r1, %:live116, r9	
		sti	r1, %:live118, r9	
		sti	r1, %:live120, r9	
		sti	r1, %:live122, r9	
		sti	r1, %:live124, r9	
		sti	r1, %:live126, r9	
		sti	r1, %:live128, r9	
		sti	r1, %:live130, r9	
		sti	r1, %:live132, r9	
		sti	r1, %:live134, r9
		sti	r1, %:live136, r9
		sti	r1, %:live138, r9	
		sti	r1, %:live140, r9	
		sti	r1, %:live142, r9	
		sti	r1, %:live144, r9	
		sti	r1, %:live146, r9	
		sti	r1, %:live148, r9	
		xor	r9,%6,r10
		zjmp	%:fork_live
		ld	%6,r9
		and	r6,%0,r6
		zjmp	%:live_live	
		
init:		fork	%:kmissile
		live	%42
		sti	r1, %:arriere_live, %1	
		fork	%:fork_arriere
		live	%42
		sti	r1, %:avant_live, %1
		fork	%:fork_avant
		live	%42
		ld	%1,r9
		and	r6,%0,r6
		zjmp	%:live_live
	
fork_live:	live	%42
		fork	%:live100
		live	%42	
		fork	%:fork_live
		live	%42
		zjmp	%:fork_live
	
live100:	live	%42
live101:	live	%42	
live102:	live	%42
live103:	live	%42
live104:	live	%42
live105:	live	%42
live106:	live	%42
live107:	live	%42
live108:	live	%42
live109:	live	%42
live110:	live	%42
live111:	live	%42
live112:	live	%42
live113:	live	%42
live114:	live	%42
live115:	live	%42
live116:	live	%42
live117:	live	%42
live118:	live	%42
live119:	live	%42
live120:	live	%42
live121:	live	%42
live122:	live	%42
live123:	live	%42
live124:	live	%42
live125:	live	%42
live126:	live	%42
live127:	live	%42
live128:	live	%42
live129:	live	%42
live130:	live	%42
live131:	live	%42
live132:	live	%42
live133:	live	%42
live134:	live	%42
live135:	live	%42
live136:	live	%42
live137:	live	%42
live138:	live	%42
live139:	live	%42
live140:	live	%42
live141:	live	%42
live142:	live	%42
live143:	live	%42
live144:	live	%42
live145:	live	%42
live146:	live	%42
live147:	live	%42
live148:	live	%42
live149:	live	%42
		zjmp	%:live101

fork_avant:	live	%42
		fork	%:avant
		zjmp	%:fork_avant
	
avant:		ld	%-5, r5
		ld	%12, r4
avant2:		ld	%10, r3
avant_live:	live %1
		sti	r4, %:fin, r3
		sub	r3, r5, r3
		sti	r4, %:fin, r3
		sub	r3, r5, r3
		sti	r4, %:fin, r3
		sub	r3, r5, r3
		sti	r4, %:fin, r3
		sub	r3, r5, r3
		sti	r4, %:fin, r3
		sub	r3, r5, r3
		xor	r3,%435,r15
		zjmp	%:avant2
		and	r6, %0, r6
		zjmp	%:avant_live
fin:		zjmp	%:avant_live
kmissile:	live	%42
		fork	%:kfork1
		live	%42
		fork	%:kfork2
		live	%42
		fork	%:kfork4
		ld	%12,r2
		ld	%192,r5
		and	r6,%0,r6
		zjmp	%:kdebut
		
kfork1:		live	%42
		fork	%:kfork3
		live	%42
		fork	%:kfork6
		ld	%0,r2
		ld	%180,r5
		and	r6,%0,r6
		zjmp	%:kdebut
	
kfork2:		live	%42
		fork	%:kfork5
		live	%42
		ld	%8,r2
		ld	%188,r5
		and	r6,%0,r6
		zjmp	%:kdebut
	
kfork3:		live	%42
		fork	%:live100
		ld	%4,r2
		ld	%184,r5
		and	r6,%0,r6
		zjmp	%:kdebut

kfork4:		ld	%16,r2
		ld	%196,r5
		and	r6,%0,r6
		zjmp	%:kdebut

kfork5:		ld	%20,r2
		ld	%200,r5
		and	r6,%0,r6
		zjmp	%:kdebut

kfork6:		ld	%24,r2
		ld	%204,r5
		and	r6,%0,r6
		zjmp	%:kdebut

kdebut:		ldi	%:kdebut,r2,r3 
		sti	r3,r5,%:kfin   
		live	%42
		and	r6,%0,r6
kfin:		zjmp	%180





.name "zork"
.comment "just a basic living prog"
		
l2:	sti	r1,%:live,%0
	and	r1,%0,r1
live:	live	%1
	zjmp	%:live
#debut du mega truc qu'il est trop dur a faire

.name "Jumper !"
.comment "en fait C forker !"

gobepc:	st r1,:buff
	st r6,-4
	ld :buff,r1
debut:	ld %0,r7
	zjmp %:suite

goboucle0:	live %66
		ldi %-5,r3,r1
		sti r1,%-173,r3
		add r3,r4,r3
		xor r5,r3,r6
		zjmp %:finboucle0
		ld %0,r7
		zjmp %:goboucle0
finboucle0:	xor r3,r3,r3
		zjmp %-207

buff:	st r1,r1	
		
suite:	sti r1,%:livel,%1
livel:	live %66
	sti r2,%:debut,%-60
	ld %4,r4
	st r2,512
go:	ld %48,r5
	sti r1,%:goboucle0,%1
	sti r1,%:goboucle1,%1
	sti r1,%:live0,%1
	sti r1,%:live1,%1
	sti r1,%:live2,%1
	sti r1,%:live3,%1
	sti r1,%:live4,%1
live0:	live %66
live1:	live %66
live2:	live %66
live3:	live %66
live4:	live %66
	zjmp %:live0
	xor r3,r3,r3
	sti r1,%:livex,%1
livex:	live %66
	fork %:live0
	sti r1,%:boucle,%1
	sti r1,%:boucle,%9
	sti r1,%:boucle,%17
	sti r1,%:boucle,%25
	
boucle:	live %66
	fork %:goboucle0
	live %66
	fork %:boucle
	live %66
	fork %:goboucle1
	live %66
	zjmp %:goboucle0
goboucle1:	live %66
		ldi %-5,r3,r1
		sti r1,%17,r3
		add r3,r4,r3
		xor r5,r3,r6
		zjmp %:finboucle1
		ld %0,r7
		zjmp %:goboucle1
finboucle1:	xor r3,r3,r3
		zjmp %1
.name	"LDE LDE LDE"
	ld %0,r6
	sti r1,%:suitb,%1
	sti r1,%:suitb,%6
	sti r1,%:suitb,%11
	sti r1,%:suitb,%16
	sti r1,%:suitb,%21
	sti r1,%:suitb,%26
	sti r1,%:suitb,%31
	sti r1,%:suitb,%36
	sti r1,%:suitb,%41
	sti r1,%:suitb,%46
	sti r1,%:suitb,%51
	sti r1,%:suitb,%63
hop:	live %1

	fork %:decal2
	live %1
	ld %0,r2
	zjmp %:decal
toto:	st r15,-480
	st r4,-481
	st r7,-482
	st r8,-483
	st r13,-484
	st r14,-485
	zjmp %-510
	
	
decal2: live %1
	fork %:suite
	live %1
	ld %57672448,r5
	ld %67334147,r6

	ld %57673214,r9
	ld %201551878,r10
	ld %4262136318,r11
	ld %33554432,r12

	ld %57674238,r15
	ld %369324042,r4
	ld %4262790000,r7
	ld %201200643,r8
	ld %1879899667,r13
	ld %167641600,r14
	
	fork %:separ2
	live %4
	ld %134443011,r3
	sti r1,%:middle,%1
	sti r1,%:middle,%6
	sti r1,%:middle,%11
	sti r1,%:middle,%16
	sti r1,%:middle,%21

	ld %0,r2
	zjmp %:toto
separ2:	live %3
	ld %263024,r3
	sti r1,%:middle,%26
	sti r1,%:middle,%31
	sti r1,%:middle,%36
	sti r1,%:middle,%41
	sti r1,%:middle,%53

	xor r2,r2,r2
	zjmp %:toto
	
padec2:	live %1
	fork %:suite
	live %1
	ld %0,r2
	zjmp %:decal

	
suite:	live %1
	fork %:hop
	live %1
	fork %:middle
suitb:	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	ld %0,r6
	live %1
	zjmp %:suitb
middle:	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	ld %0,r6
	live %1
	zjmp %:middle

	
decal:	live %1
	fork %:fuite
	live %1
	ld %57672448,r5
	ld %67334147,r6

	ld %57672961,r9
	ld %4228083718,r10
	ld %33229057,r11
	ld %4060086272,r12

	ld %57673985,r15
	ld %4228083722,r4
	ld %33227632,r7
	ld %184678915,r8
	ld %1879835129,r13
	ld %151119872,r14
	
	fork %:sepa
	live %4
	ld %134443011,r3
	ld %0,r2
	zjmp %:tot
sepa:	live %3
	ld %263024,r3
	xor r2,r2,r2
	zjmp %:tot

	live %4
	live %4
	live %4
	live %4
	live %4
	live %4
	live %4
	live %4
	live %4
	live %4
	live %4
	live %4
	live %4
	live %4
	live %4
	
tot:	st r15,488
	st r4,487
	st r7,486
	st r8,485
	st r13,484
	st r14,483
	zjmp %458
	
	
fuite:	live %1
	fork %:separe
	live %4
	ld %134443011,r3
	ld %0,r2
	zjmp %:debut
separe:	live %3
	ld %263024,r3
	xor r2,r2,r2
	zjmp %:debut
debut:	st r3,4
.name	"Leeloo"
.comment "Multipass"
	
begin:	ld %0,r6
jump:	zjmp %:deb
	
pare:	st r16,:begin -52
	st r16,:begin -44
	st r16,:begin -52
	st r16,:begin -44
	st r16,:begin -52
	st r16,:begin -44
	st r16,:begin -52
	live %1
	st r16,:begin -44
	st r16,:begin -52
	st r16,:begin -44
	st r16,:begin -52
	st r16,:begin -44
	st r16,:begin -52
	st r16,:begin -44
	zjmp %:pare
toto:	st r15,-480
	st r4,-481
	st r7,-482
	st r8,-483
	st r13,-484
	st r14,-485
	zjmp %-510
deb:	
st1:	st r1,:lastlive1 +1
st2:	st r1,:lastlive2 +1
st3:	st r1,:lastlive3 +1
st4:	st r1,:lastlive4 +1
st5:	st r1,:live1 +1
st6:	st r1,:live2 +1
st7:	st r1,:live3 +1
st8:	st r1,:live4 +1
	st r16,:jump
	st r16,:begin -4
	st r16,:begin -8
	st r16,:begin -12

hop:	live %1
	fork %:decal2
	live %1
	ld %0,r2
	zjmp %:decal

toto1:	zjmp %:toto	
pare1:	ld %0,r16
	zjmp %:pare	
decal2: live %1
	fork %:suite
	live %1
	ld %57672448,r5
	ld %67334147,r6

	ld %57673214,r9
	ld %201551878,r10
	ld %4262136318,r11
	ld %33554432,r12

	ld %57674238,r15
	ld %369324042,r4
	ld %4262790000,r7
	ld %201200643,r8
	ld %1879899667,r13
	ld %167641600,r14
	
	fork %:separ2
	live %4
	ld %0x08F40370,r3   #ld %0x07F40370,r3

	ld %0,r2
	zjmp %:toto
separ2:	live %3
	ld %0x037004F4,r3  #ld %0x70037004,r3

	xor r2,r2,r2
	zjmp %:toto
	
padec2:	live %1
	fork %:suite
	live %1
	ld %0,r2
	zjmp %:decal

catch1:	zjmp %:catch
	
suite:	live %1
	fork %:hop
	live %1
	fork %:just
just:	live %3
	fork %:just2
just2:	live %3
	fork %:just3
just3:	live %3
	fork %:just4
	live %3
just4:	live %3
	fork %:just5
	live %3
just5:	fork %:middle
suitb:	live %3
	st r16,:st1+1
	live %3
	st r16,:st1+1
	live %3
	st r16,:st1+1
live1:	live %3
	st r16,:st1+1
live2:	live %3
	st r16,:st1+1
lastlive1: live %1
	ld %0,r6
lastlive2: live %1
	zjmp %:suitb
middle:	live %3
	st r16,:st2+1
	live %3
	st r16,:st2+1
	live %3
	st r16,:st2+1
live3:	live %3
	st r16,:st2+1
live4:	live %4
lastlive3: live %1
	ld %0,r6
lastlive4: live %1
	zjmp %:middle

	
decal:	live %1
	fork %:pare1
	live %1
	fork %:fuite
	live %1
	ld %0x03700300,r5
	ld %0x04037003,r6

	ld %0x03700501,r9
	ld %0xFC037006,r10
	ld %0x01FB0901,r11
	ld %0xF2000000,r12

	ld %0x03700901,r15
	ld %0xFC03700A,r4
	ld %0x01FB0370,r7
	ld %0x0B01FA03,r8
	ld %0x700C01F9,r13
	ld %0x0901E800,r14
	
	fork %:sepa
	live %4
	ld %0x07510370,r3
	ld %0,r2
	zjmp %:tot
sepa:	live %3
	ld %0x70037004,r3
	xor r2,r2,r2
	zjmp %:tot
catch:	
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	ld %0,r16
	zjmp %:catch
	
fuite:	live %1
	fork %:separe
	live %4
	ld %0x07510370,r3
	ld %0,r2
	zjmp %:debut
separe:	live %3
	ld %0x70037004,r3
	xor r2,r2,r2
	zjmp %:debut
	
		
tot:	st r15,488
	st r4,487
	st r7,486
	st r8,485
	st r13,484
	st r14,483
	zjmp %458
	
debut:	st r3,4
fin:

avant:	

#	075103700370075103700771

arriere:

#       08 F4 03 70 03 70 08 F4 03 70


.name "Mat"
.comment "Mat"

	xor r0,r0,r0
	zjmp %:deb1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
deb1:	zjmp %:deb
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
	live %1
deb:	fork %12
	ld %0x70000004,r0
.code 03 FF FF
	ld %0x08030003,r0
	live %1
	st r0,4
	

.name " maxidef "
.comment " module de defense"

loop:	live %0
	zjmp %8

gobepc:	st r1,6			# 03 70 01 00 06			5
	live %66		# 01 00 00 00 42			10
	ld -4,r1		# 02 d0 ff fc 01			5
	st r2,-14		# 03 70 02 ff f2			5
	
	ld %0,r5
	zjmp %:init

slide2:	zjmp %-492

slide1: live %1
	st r2,-385
	st r4,-386
defm:	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
	st r3,-510
deflv:	live %1
	zjmp %:defm


init:	ld %57672703,r3
	#ld %57672560,r3
	sti r1,%:loop,%1
	sti r1,%:source,%1
	sti r1,%:source,%9
	sti r1,%:arbre,%1
	sti r1,%:gen21,%1
	sti r1,%:gen22,%1
	sti r1,%:deflv,%1
	sti r1,%:slide1,%1
	ld :deflv,r2
	ldi %:deflv,%4,r4
	ld %0,r5

source:	live %1
	fork %-5
	live %1
	zjmp %:arbre

arbre:	live %1
	fork %:gen22	


gen21:	live %1		
	zjmp %:slide1
gen22:	live %1		
	zjmp %:slide2


.name	"Booster !"
.comment "Alors la, si ca marche, trop content !  :)"

boost:	ld %12,r2
	ld %3,r3
	ld %4,r4
	ld %5,r7

	sti r1,%:live1,%1
live1:	live %66
	sti r1,%:fork0,%1
	sti r1,%:fork1,%1
	sti r1,%:fork2,%1
	sti r1,%:wait,%1
	sti r1,%:master,%1
	sti r1,%:numero1,%1
	sti r1,%:numero2,%1

	sti r1,%:live,%-4
	ldi %:live,%-2,r6
fork0:	live %66
	fork %:numero1
fork1:	live %66
	fork %:numero2
fork2:	live %66
#	fork %:fork0

master:	live %66
	ld %0,r3
	ld %16777216,r6
#	ldi %:master,%0,r6
	ld %0,r5
	zjmp %:ready

numero1: live %66
	ld %3,r3
	ld %68436,r2
#	ldi %:live,%-2,r6
	ld %0,r5
	zjmp %:ready

numero2: live %66
	ld %6,r3
	ld %1409680135,r6
#	ldi %:tampon,%1,r6
	ld %0,r5
	zjmp %:ready

tampon:	sti r6,r3,r5
live:	sti r1,r5,r5

ready:	sti r6,r3,%:ecriture

wait:	live %66
	zjmp %:ecriture

ecriture: zjmp %:wait



.name	"Leeloo"
.comment "Multipass"
.extend
	
begin:	ld %0,r6
jump:	zjmp %:deb
.code	00	
pare:	st r0,:begin -52
	st r0,:begin -44
	st r0,:begin -52
	st r0,:begin -44
	st r0,:begin -52
	st r0,:begin -44
	st r0,:begin -52
	live %1
	st r0,:begin -44
	st r0,:begin -52
	st r0,:begin -44
	st r0,:begin -52
	st r0,:begin -44
	st r0,:begin -52
	st r0,:begin -44
	zjmp %:pare
toto:	st r15,-480
	st r4,-481
	st r7,-482
	st r8,-483
	st r13,-484
	st r14,-485
	zjmp %-510
deb:	
st1:	st r1,:lastlive1 +1
st2:	st r1,:lastlive2 +1
st3:	st r1,:lastlive3 +1
st4:	st r1,:lastlive4 +1
st5:	st r1,:live1 +1
st6:	st r1,:live2 +1
st7:	st r1,:live3 +1
st8:	st r1,:live4 +1
	ld %0x01090000 + :catch1 - :begin -1,r0
	st r0,:jump
	ld %0xFFFFFFFF,r0
	st r0,:begin -4
	st r0,:begin -8
	st r0,:begin -12

hop:	live %1
	fork %:decal2
	live %1
	ld %0,r2
	zjmp %:decal

toto1:	zjmp %:toto	
pare1:	ld %0,r0
	zjmp %:pare	
decal2: live %1
	fork %:suite
	live %1
	ld %57672448,r5
	ld %67334147,r6

	ld %57673214,r9
	ld %201551878,r10
	ld %4262136318,r11
	ld %33554432,r12

	ld %57674238,r15
	ld %369324042,r4
	ld %4262790000,r7
	ld %201200643,r8
	ld %1879899667,r13
	ld %167641600,r14
	
	fork %:separ2
	live %4
	ld %0x08F40370,r3   #ld %0x07F40370,r3

	ld %0,r2
	zjmp %:toto
separ2:	live %3
	ld %0x037004F4,r3  #ld %0x70037004,r3

	xor r2,r2,r2
	zjmp %:toto
	
padec2:	live %1
	fork %:suite
	live %1
	ld %0,r2
	zjmp %:decal

catch1:	zjmp %:catch
	
suite:	live %1
	fork %:hop
	live %1
	fork %:just
just:	live %3
	fork %:just2
just2:	live %3
	fork %:just3
just3:	live %3
	fork %:just4
	live %3
just4:	live %3
	fork %:just5
	live %3
just5:	fork %:middle
suitb:	live %3
	st r0,:st1+1
	live %3
	st r0,:st1+1
	live %3
	st r0,:st1+1
live1:	live %3
	st r0,:st1+1
live2:	live %3
	st r0,:st1+1
lastlive1: live %1
	ld %0,r6
lastlive2: live %1
	zjmp %:suitb
middle:	live %3
	st r0,:st2+1
	live %3
	st r0,:st2+1
	live %3
	st r0,:st2+1
live3:	live %3
	st r0,:st2+1
live4:	live %4
lastlive3: live %1
	ld %0,r6
lastlive4: live %1
	zjmp %:middle

	
decal:	live %1
	fork %:pare1
	live %1
	fork %:fuite
	live %1
	ld %0x03700300,r5
	ld %0x04037003,r6

	ld %0x03700501,r9
	ld %0xFC037006,r10
	ld %0x01FB0901,r11
	ld %0xF2000000,r12

	ld %0x03700901,r15
	ld %0xFC03700A,r4
	ld %0x01FB0370,r7
	ld %0x0B01FA03,r8
	ld %0x700C01F9,r13
	ld %0x0901E800,r14
	
	fork %:sepa
	live %4
	ld %0x07510370,r3
	ld %0,r2
	zjmp %:tot
sepa:	live %3
	ld %0x70037004,r3
	xor r2,r2,r2
	zjmp %:tot
catch:	
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	live %5
	ld %0,r0
	zjmp %:catch
	
fuite:	live %1
	fork %:separe
	live %4
	ld %0x07510370,r3
	ld %0,r2
	zjmp %:debut
separe:	live %3
	ld %0x70037004,r3
	xor r2,r2,r2
	zjmp %:debut
	
		
tot:	st r15,488
	st r4,487
	st r7,486
	st r8,485
	st r13,484
	st r14,483
	zjmp %458
	
debut:	st r3,4
fin:

avant:	

#	075103700370075103700771

arriere:

#       08 F4 03 70 03 70 08 F4 03 70


.name    "sebc"
.comment "sebc"
.extend


.name		"Sliders"
.comment	"And the winner is ..."

		sti     r1,%:leon_live,%1
		sti	r1,%:fork1,%1
		sti	r1,%:fork2,%1
		sti	r1,%:roger_live,%1
		sti	r1,%:torp,%1
		sti	r1,%:torp_,%1
		sti	r1,%:fork3,%1
		sti	r1,%:fork_live,%1
		sti	r1,%:live,%1
		sti	r1,%:live,%6
		sti	r1,%:live,%11
		sti	r1,%:live,%16
		sti	r1,%:live,%21
		sti	r1,%:live,%26
		sti	r1,%:live,%31
		sti	r1,%:live,%36
		sti	r1,%:live,%41
		sti	r1,%:live,%46
		sti	r1,%:live,%51
		sti	r1,%:live,%56
		sti	r1,%:live,%61
		sti	r1,%:live,%66
		sti	r1,%:live,%71
		sti	r1,%:live,%76
		sti	r1,%:live,%81
		sti	r1,%:live,%86
		sti	r1,%:live,%91
		sti	r1,%:live,%96
		sti	r1,%:live,%101	
		sti	r1,%:live,%106
		sti	r1,%:live,%111
		sti	r1,%:live,%116
		ld	%48,r14	
		ld      %4,r4
		ld      %48,r6
		ld	%48,r13
		ld	%:leon_ecrit,r8
		ld	%330,r9
		add	r8,r9,r8
		ld	%:roger,r12
		sub	r12,r8,r12
fork1:		live	%42
		fork	%:fork_live
fork2:		live	%42
		fork	%:leon
fork3:		live	%42
		fork	%:roger
		ld	%0,r15	
		zjmp	%:torp
leon:		ld      %0,r2
leon_live:	live    %42
		ldi     %:leon,r2,r3
		sti     r3,r8,r2
		add     r2,r4,r2
		xor     r13,r2,r7
		zjmp    %415
		ld      %0,r15
leon_ecrit:	zjmp    %:leon_live
roger:		ld	%0,r10
roger_live:	live	%42
		ldi	%:roger,r10,r11
		sti	r11,r12,r10
		add	r10,r4,r10
		xor	r6,r10,r7
		zjmp	%-361
		ld	%0,r15
roger_ecrit:	zjmp	%:roger_live
torp:		live	%42	
		fork	%:leon
torp_:		live	%42
		fork	%:roger
		ld	%0,r15
		zjmp	%:torp
live:		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42
		live	%42	
		zjmp	%:live
fork_live:	live	%42
		fork	%:live
		ld	%0,r15
		zjmp	%:fork_live
	










.name 		"dtonc v1.0pl2"
.comment	"ta mere elle fait du rodeo sur les kfar"
.extend
	
begin:
#	st	r1, :boucle+1
#	st	r1, :rboucle+1
#	st	r1, :liver1+1
#	st	r1, :liver2+1	
#	st	r1, :gen+1
	
ld1:	
	ld	%15, r3 	#offset
	ld	%195, r4	#limit
	ld	%0, r7		#pattern faites nous confiance
	ld	%0x00090000, r8	#pattern poison

#gen:	
#	live	%1
#	fork	%:gen
#	fork	%:boucle
#	fork	%:rboucle
#	ld 	%0, r5
#	zjmp	%:gen

	
liver1:
	live	%1
	fork	%:liver1
	ld	%0, r5
	fork	%:liver2
	live	%1
	fork	%:boucle
	live	%1
	fork	%:rboucle
	zjmp	%:liver1
	
liver2:	
	live	%1
	zjmp	%:liver2

boucle:	
	live	%1
	fork	%:boucle
no:
	live	%1
	sti	r8, %:end, r2
	add	r2, r3, r2
	sub	r4, r2, r5	#r4 = r2
	zjmp	%:boucle2
	ld	%0, r5
	zjmp	%:no
	
boucle2:
	ld	%0, r2
	zjmp	%:no

#	live %0
#	live %0
#	live %0
	
rboucle:
	live	%1
	fork	%:rboucle
rno:
	live	%1
	sti	r7, %:begin ,r2
	sub	r2, r3, r2
	add	r4, r2, r5	#r4 = r2
	zjmp	%:rboucle2
	ld	%0, r5
	zjmp	%:rno

rboucle2:
	ld	%0, r2
	zjmp	%:rno
	
toto:	
	live	%0
	xor 	r1, r1, r5
	zjmp	%:toto


end:	
	xor r1, r1, r1
	











.name 		"dtonc v1.0pl3"
.comment	"ta mere elle fait du rodeo sur les kfar"
.extend

	ld	%0x80000000, r6	# moins
	ld	%10, r3		# offset
	ld	%200, r4	# range

gen:
	live	%1
	add	r2, r3, r2
	sub	r2, r4, r5
	and	r5, r6, r5
	zjmp	%:ok
	ld	%0, r2
ok:
	live	%1
	fork	%:no
	fork	%:gen
	ld	%0, r5
	zjmp	%:gen
	
no:
	live	%1	
	sti	r8, %:end, r2
	add	r2, r3, r2
	sub	r4, r2, r5	#r4 = r2
	zjmp	%:boucle2
	ld	%0, r5
	zjmp	%:no
	
boucle2:
	ld	%0, r2
	zjmp	%:no

end:	
.name 		"dtonc v1.0pl4"
.comment	"ta mere elle fait du rodeo sur les kfar"
.extend


debut:	
	st	r1, :li1+1
	st	r1, :li2+1
	ld	%100, r4
	ld	%4, r6
	ld	%0, r3
li1:	
	live	%1
	
cp:	
	ldi	%:debut, r3, r2
	sti	r2, %400, r3
	add	r3, r6, r3
	sub	r3, r4, r5
li2:	
	live	%1
	zjmp	%:debut+400
	ld	%0, r5
	zjmp	%:cp
#
# Warrior qui a gagne
# l'annee derniere
#     VOALA
#
.name		"Celebration Funebre v0.99pl42"
.comment	"Jour J"

		ld   %0,r3		
label:		zjmp %:avantdebt
		zjmp %0				# pour eviter ecrasement
						# de l'instruction suivante
code:		live %42			# 5
		sti  r15,%0,r14			# 6
		zjmp %-200			# 3
		live %42			# 5
		sti  r15,%0,r14			# 6
		zjmp %-200			# 3
		live %42			# 5
		sti  r15,%0,r14			# 6
		zjmp %-200			# 3
		live %42			# 5
		sti  r15,%0,r14			# 6
		zjmp %-200			# 3
		sti  r15,%0,r14			# 6
		zjmp %-200			# 3
		sti  r15,%0,r14			# 6
		zjmp %-200
	
avantdebt:	sti   r1,%:code,%1  # 		# mets a jour le live
		sti   r1,%:code,%15 # 		# mets a jour le live
		sti   r1,%:code,%29 # 		# mets a jour le live
		sti   r1,%:code,%43 # 		# mets a jour le live
		sti   r1,%:code,%57 # 		# mets a jour le live
		sti   r1,%:code,%71 # 		# mets a jour le live
init:		ld   %393216,r4		 	#7	
		ld   %917504,r12		#7	
		ld   %1,r11			#7
		ld   %6,r10			#7
debt:		live %42			#5
		sti  r4,%:label,%1		#7
		add  r4,r12,r4			#5	
		sub  r10,r11,r10		#5
		zjmp %:init			#3
		fork %:debt			
		live %3
level0:		fork %:level10
level11:	live %4
		fork %:level111

level110:	live %42
		ldi  %8,%:code,r15		#set des octets 9-12
		ld   %-186,r14			#=$A-6-8
		ld   %0,r2
		zjmp  %:label
			
level10:	live %42
		fork %:level100
level101:	live %42
		ldi  %4,%:code,r15 		#set des octets 5-8
		ld   %-190,r14			#=$A-6-4
		ld   %0,r2
		zjmp %:label
		
level111:	live %42	
		ldi  %12,%:code,r15		#set des octets 13-16
		ld   %-182,r14			# $A -6 -12
		ld   %0,r2
		zjmp %:label
		
level100:	live %42
		ldi  %0,%:code,r15		#set des octets 1-4
		ld   %-194,r14			# $A -6 -0
		ld   %0,r2			#
		zjmp %:label			#



